P_Dice_1 :: dice_roll(L, P_Dice_1, P_Dice_2, P_Dice_3, P_Dice_4, P_Dice_5, P_Dice_6, D, 1); P_Dice_2 :: dice_roll(L, P_Dice_1, P_Dice_2, P_Dice_3, P_Dice_4, P_Dice_5, P_Dice_6, D, 2); P_Dice_3 :: dice_roll(L, P_Dice_1, P_Dice_2, P_Dice_3, P_Dice_4, P_Dice_5, P_Dice_6, D, 3); P_Dice_4 :: dice_roll(L, P_Dice_1, P_Dice_2, P_Dice_3, P_Dice_4, P_Dice_5, P_Dice_6, D, 4); P_Dice_5 :: dice_roll(L, P_Dice_1, P_Dice_2, P_Dice_3, P_Dice_4, P_Dice_5, P_Dice_6, D, 5); P_Dice_6 :: dice_roll(L, P_Dice_1, P_Dice_2, P_Dice_3, P_Dice_4, P_Dice_5, P_Dice_6, D, 6) :- dice(L, P_Dice_1, P_Dice_2, P_Dice_3, P_Dice_4, P_Dice_5, P_Dice_6, D).
dice(fair, 0.1666, 0.1666, 0.1666, 0.1666, 0.1666, 0.1666, D ) :- between(1, 2, D).
alias_X(X1, X2) :- dice_roll(fair, 0.1666, 0.1666, 0.1666, 0.1666, 0.1666, 0.1666, 1, X1 ), dice_roll(fair, 0.1666, 0.1666, 0.1666, 0.1666, 0.1666, 0.1666, 2, X2 ) .
dice(unfair, 0.1666, 0.0666, 0.0666, 0.3666, 0.0666, 0.2666, D ) :- between(1, 16, D).
alias_Y(Y1, Y2, Y3, Y4, Y5, Y6, Y7, Y8, Y9) :- dice_roll(unfair, 0.1666, 0.0666, 0.0666, 0.3666, 0.0666, 0.2666, 1, Y1 ), dice_roll(unfair, 0.1666, 0.0666, 0.0666, 0.3666, 0.0666, 0.2666, 2, Y2 ), dice_roll(unfair, 0.1666, 0.0666, 0.0666, 0.3666, 0.0666, 0.2666, 3, Y3 ), dice_roll(unfair, 0.1666, 0.0666, 0.0666, 0.3666, 0.0666, 0.2666, 4, Y4 ), dice_roll(unfair, 0.1666, 0.0666, 0.0666, 0.3666, 0.0666, 0.2666, 5, Y5 ), dice_roll(unfair, 0.1666, 0.0666, 0.0666, 0.3666, 0.0666, 0.2666, 6, Y6 ), dice_roll(unfair, 0.1666, 0.0666, 0.0666, 0.3666, 0.0666, 0.2666, 7, Y7 ), dice_roll(unfair, 0.1666, 0.0666, 0.0666, 0.3666, 0.0666, 0.2666, 8, Y8 ), dice_roll(unfair, 0.1666, 0.0666, 0.0666, 0.3666, 0.0666, 0.2666, 9, Y9 ).

q :- alias_X(X1, X2),alias_Y(Y1, Y2, Y3, Y4, Y5, Y6, Y7, Y8, Y9), X1 - X2 =:= 2, Y1 =:= 5 .
query(q).
